//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Control_Shipping.Models.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CSEntities : DbContext
    {
        public CSEntities()
            : base("name=CSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tbl_Estacion_Partes> tbl_Estacion_Partes { get; set; }
        public virtual DbSet<tbl_Estaciones> tbl_Estaciones { get; set; }
        public virtual DbSet<tbl_Partes> tbl_Partes { get; set; }
        public virtual DbSet<tbl_Proyectos> tbl_Proyectos { get; set; }
        public virtual DbSet<tbl_Seriales> tbl_Seriales { get; set; }
    
        public virtual ObjectResult<sp_Partes_Result> sp_Partes(string estacion)
        {
            var estacionParameter = estacion != null ?
                new ObjectParameter("Estacion", estacion) :
                new ObjectParameter("Estacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Partes_Result>("sp_Partes", estacionParameter);
        }
    
        public virtual ObjectResult<sp_Partes_Activas_Result> sp_Partes_Activas(string estacion)
        {
            var estacionParameter = estacion != null ?
                new ObjectParameter("Estacion", estacion) :
                new ObjectParameter("Estacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Partes_Activas_Result>("sp_Partes_Activas", estacionParameter);
        }
    
        public virtual ObjectResult<sp_Serial_Historial_Result> sp_Serial_Historial(string estacion)
        {
            var estacionParameter = estacion != null ?
                new ObjectParameter("Estacion", estacion) :
                new ObjectParameter("Estacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Serial_Historial_Result>("sp_Serial_Historial", estacionParameter);
        }
    
        public virtual ObjectResult<sp_Valida_DMC_Result> sp_Valida_DMC(string estacion)
        {
            var estacionParameter = estacion != null ?
                new ObjectParameter("Estacion", estacion) :
                new ObjectParameter("Estacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Valida_DMC_Result>("sp_Valida_DMC", estacionParameter);
        }
    
        public virtual ObjectResult<string> sp_Valida_DMC_Honda(string dMC)
        {
            var dMCParameter = dMC != null ?
                new ObjectParameter("DMC", dMC) :
                new ObjectParameter("DMC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_Valida_DMC_Honda", dMCParameter);
        }
    
        public virtual ObjectResult<sp_Inserta_DMC_Result> sp_Inserta_DMC(string estacion, string dmc, string parte, string juliano, Nullable<int> turno, Nullable<System.DateTime> fecha)
        {
            var estacionParameter = estacion != null ?
                new ObjectParameter("Estacion", estacion) :
                new ObjectParameter("Estacion", typeof(string));
    
            var dmcParameter = dmc != null ?
                new ObjectParameter("dmc", dmc) :
                new ObjectParameter("dmc", typeof(string));
    
            var parteParameter = parte != null ?
                new ObjectParameter("Parte", parte) :
                new ObjectParameter("Parte", typeof(string));
    
            var julianoParameter = juliano != null ?
                new ObjectParameter("Juliano", juliano) :
                new ObjectParameter("Juliano", typeof(string));
    
            var turnoParameter = turno.HasValue ?
                new ObjectParameter("Turno", turno) :
                new ObjectParameter("Turno", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Inserta_DMC_Result>("sp_Inserta_DMC", estacionParameter, dmcParameter, parteParameter, julianoParameter, turnoParameter, fechaParameter);
        }
    
        public virtual ObjectResult<sp_GetPallet_Result> sp_GetPallet(string estacion, string parte)
        {
            var estacionParameter = estacion != null ?
                new ObjectParameter("Estacion", estacion) :
                new ObjectParameter("Estacion", typeof(string));
    
            var parteParameter = parte != null ?
                new ObjectParameter("Parte", parte) :
                new ObjectParameter("Parte", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPallet_Result>("sp_GetPallet", estacionParameter, parteParameter);
        }
    
        public virtual int sp_UpdateParte(Nullable<int> id, Nullable<bool> estatus)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var estatusParameter = estatus.HasValue ?
                new ObjectParameter("Estatus", estatus) :
                new ObjectParameter("Estatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateParte", idParameter, estatusParameter);
        }
    }
}
